{"version":3,"sources":["store/appStore.js","components/table.js","def_value.txt","components/form.js","index.js"],"names":["data","load","dt_box","keywords_box","rest_ent_box","setData","updateLoad","updateDT","updateKeywords","updateEntities","makeAutoObservable","this","Table","observer","props","genTemplate","str","i","Object","keys","table","length","checkSent","obj","el","toJS","appStore","el2","splice","filter","bar","concat","slice","map","elem","className","paragraphs","style","sort","el3","join","URL","process","Form","useState","url","setUrl","textarea","setTextArea","useForm","shouldUnregister","register","handleSubmit","setValue","errors","formState","useEffect","fetch","then","r","json","M","updateTextFields","textareaAutoResize","document","getElementById","ta","querySelectorAll","CharacterCounter","init","changeURL","onSubmit","axios","post","res","catch","err","responseType","window","createObjectURL","Blob","link","createElement","href","setAttribute","body","appendChild","click","id","required","maxLength","htmlFor","index","onClick","push","indexOf","el1","value","pop","delTextArea","type","checked","onChange","exampleRequired","App","ReactDOM","render"],"mappings":"2LAkBe,MATX,aAAe,IAAD,gCALdA,KAAO,KAKO,KAJdC,MAAO,EAIO,KAHdC,QAAS,EAGK,KAFdC,cAAe,EAED,KADdC,cAAe,EACD,KAEdC,QAAU,SAACL,GAAW,EAAKA,KAAOA,GAFpB,KAGdM,WAAa,WAAQ,EAAKL,MAAQ,EAAKA,MAHzB,KAIdM,SAAW,WAAQ,EAAKL,QAAU,EAAKA,QAJzB,KAKdM,eAAiB,WAAQ,EAAKL,cAAgB,EAAKA,cALrC,KAMdM,eAAiB,WAAQ,EAAKL,cAAgB,EAAKA,cANnCM,YAAmBC,O,cC2ExBC,EAhFDC,aAAS,SAACC,GAEpB,IADJ,EAGUC,EAAc,SAACC,GACjB,IAAI,IAAIC,EAAI,EAAGA,EAAIC,OAAOC,KAAKC,EAAM,GAAN,UAAsB,IAAIC,OAAS,EAAGJ,IAAKD,GAAO,OACjF,MAAO,CAAC,oBAAuBA,IAQ7BM,EAAY,SAACC,GACf,IAAI,IAAIC,KAAMD,EACV,GAAU,SAAPC,GAAoC,IAAnBD,EAAIC,GAAIH,OAAc,OAAO,EAErD,OAAO,GAGPD,EAAQK,YAAKX,EAAMY,SAAS1B,KAAf,MApBrB,cAsBmBoB,GAtBnB,IAsBI,2BACA,CAAC,IAAD,EADSI,EACT,sBACmBA,EAAE,WADrB,IACI,IAAI,EAAJ,qBACA,CAAC,IADOG,EACR,QACQb,EAAMY,SAASxB,eACRyB,EAAI,aACXb,EAAMY,SAASvB,qBACRwB,EAAG,SACVb,EAAMY,SAAStB,qBACRuB,EAAI,kBARvB,gCAvBJ,kDAmCmBP,GAnCnB,IAmCI,2BACI,IADJ,IAASI,EAAT,QACYP,EAAI,EAAGA,EAAGO,EAAE,UAAcH,OAAQJ,IAClCK,EAAUE,EAAE,UAAcP,KAC1BO,EAAE,UAAcI,OAAOX,EAAG,GAtC1C,8BA0CI,GAFAG,EAAQA,EAAMS,QAAO,SAACL,GAAQ,OAAkC,IAA3BA,EAAE,UAAcH,UAEhC,IAAjBD,EAAMC,OACV,CACI,IAGMS,EAHOZ,OAAOC,KAAKC,EAAM,IAC1BW,OAAOb,OAAOC,KAAKC,EAAM,GAAN,UAAsB,KAAKY,MAAM,GAAG,GAE3CC,KAAK,SAACC,GAAU,OAAO,qBAAKC,UAAW,SAAhB,SAA2BD,OAE7DE,EAAahB,EAAMa,KAAI,SAACT,GAE1B,OAAO,sBAAKW,UAAU,cAAcE,OA3CtBrB,EA2C0C,UAzCrD,CAAC,oBADRA,GAAG,WAAQ,EAAyD,GAApDE,OAAOC,KAAKC,EAAM,GAAN,UAAsB,IAAIC,OAAS,GAA5D,QA0CQ,UACFH,OAAOC,KAAKK,GAAIc,OAAON,MAAM,GAAG,GAAGC,KAAI,SAACM,GACrC,OAAO,qBAAKJ,UAAU,KAAf,SAAqBX,EAAGe,GAAKC,KAAK,WAE7C,8BAAMhB,EAAE,UAAcS,KAAI,SAACN,GACf,OAAO,sBAAKQ,UAAW,MAAME,MAAOtB,EAAY,OAAzC,UACH,qBAAKoB,UAAU,KAAf,SAAqBR,EAAG,KAASa,KAAK,QACrCtB,OAAOC,KAAKQ,GAAKK,MAAM,GAAG,GAAGC,KAAK,SAACM,GAChC,OAAO,qBAAKJ,UAAU,KAAf,SAAqBR,EAAIY,GAAKC,KAAK,sBAnDrD,IAACxB,KA2DlB,OACQ,qBAAKmB,UAAU,WAAf,SACI,sBAAKA,UAAU,QAAQE,MApEZ,CAAC,MAAU,IAAyD,KAAlDnB,OAAOC,KAAKC,EAAM,GAAN,UAAsB,IAAIC,OAAS,GAAU,MAoEtF,UACI,qBAAKc,UAAU,OAAOE,MAAOtB,EAAY,eAAzC,SAA0De,IAC1D,8BAAMM,SAKrB,OAAO,qBAAKD,UAAU,OAAf,uE,yDCjFD,MAA0B,sCCOnCM,EAAMC,yBA2LGC,EAxLF9B,aAAS,SAACC,GAEnB,MAAsB8B,mBAAS,MAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAgCF,mBAAS,CAAC,cAA1C,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAoEC,YAAQ,CAACC,kBAAkB,IAAvFC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,SAAuBC,EAAvD,EAA0CC,UAAaD,OAEvDE,qBAAU,WAENC,MAAMzD,GAAM0D,MAAK,SAAAC,GAAC,OAAIA,EAAEC,OACnBF,MAAK,SAAAC,GAEFN,EAAS,UAAWM,EAAC,SACrBN,EAAS,YAAaM,EAAC,SACvBN,EAAS,OAAQM,EAAC,MAElBE,IAAEC,mBACFD,IAAEE,mBAAmBC,SAASC,eAAe,sBAGtD,IAEHT,qBAAU,WAEN,IAAMU,EAAKF,SAASG,iBAAiB,0BACrCN,IAAEO,iBAAiBC,KAAKH,MAG5B,IAAMI,EAAY,SAACtD,GAAD,OAAS8B,EAAO9B,IA8DlC,OACI,uBAAMmB,UAAU,OAAOoC,SAAUnB,GAvCpB,SAACpD,GAEV6C,IAAQJ,EAAI,aAEZ3B,EAAMY,SAASpB,aACfkE,IAAMC,KAAK5B,EAAK7C,GACX0D,MAAK,SAAAgB,GACF5D,EAAMY,SAASrB,QAAQqE,EAAI1E,MAC3Bc,EAAMY,SAASpB,aACfgE,EAAU7B,MAEbkC,OAAM,SAAAC,GACH9D,EAAMY,SAASpB,aACfgE,EAAU7B,OAIbI,IAAQJ,EAAI,aAEjB3B,EAAMY,SAASpB,aACfkE,IAAMC,KAAK5B,EAAK7C,EAAM,CAAE6E,aAAc,SACjCnB,MAAK,SAAAgB,GACF,IAAM7B,EAAMiC,OAAOrC,IAAIsC,gBAAgB,IAAIC,KAAK,CAACN,EAAI1E,QAC/CiF,EAAOjB,SAASkB,cAAc,KACpCD,EAAKE,KAAOtC,EACZoC,EAAKG,aAAa,WAAY,aAC9BpB,SAASqB,KAAKC,YAAYL,GAC1BA,EAAKM,QACLzE,EAAMY,SAASpB,aACfgE,EAAU7B,MAEbkC,OAAM,SAAAC,GACH9D,EAAMY,SAASpB,aACfgE,EAAU7B,UAMtB,UACI,qBAAKN,UAAU,YAAf,SACI,sBAAKA,UAAU,qBAAf,UACA,sCACIqD,GAAG,YACHrD,UAAU,6CACVE,MAAO,CAAC,OAAS,QACjB,cAAY,OACRc,EAAS,UAAW,CAACsC,UAAU,EAAMC,UAAW,QAEpD,uBAAOC,QAAQ,YAAf,wNAKJ5C,EAASd,KAAI,SAACT,EAAIoE,GACV,OAAO,sBAAKzD,UAAU,sBAAf,UACH,sBAAKA,UAAU,qBAAf,UACJ,sCACIqD,GAAIhE,EACJW,UAAU,6CACVE,MAAO,CAAC,OAAS,QACjB,cAAY,OACRc,EAAS3B,EAAI,CAACiE,UAAU,EAAMC,UAAW,QAEjC,uBAAOC,QAAQ,YAAf,6LAGE,IAAVC,GACA,wBAAQzD,UAAU,oEACd0D,QAAS,kBAzFrC9C,EAAS+C,KAAK,YAAc/C,EAAS1B,OAAS,SAC9C2B,EAAYD,IAuFY,SAEI,mBAAGZ,UAAU,iBAAb,mBAIM,IAAVyD,GACA,wBAAQzD,UAAU,sEAEV0D,QAAS,kBA7FzB,SAAC3D,GAEjB,GAAwB,IAApBa,EAAS1B,OACb,CAEI,IADA,IAAMuE,EAAQ7C,EAASgD,QAAQ7D,GAAQ,EAC/BjB,EAAI2E,EAAO3E,GAAK8B,EAAS1B,OAAS,EAAGJ,IAC7C,CACI,IAAI+E,EAAMhC,SAASC,eAAe,WAAa2B,GAC3CjE,EAAMqC,SAASC,eAAe,YAAc2B,EAAM,IACtDI,EAAIC,MAAStE,EAAIsE,MAErBlD,EAASmD,MACTlD,EAAYD,IAiF+BoD,CAAY3E,IAFnC,SAGI,mBAAGW,UAAU,iBAAb,2BAMxB,sBAAKA,UAAU,cAAf,UACI,sCACIqD,GAAG,YACHrD,UAAU,6CACVE,MAAO,CAAC,OAAS,SACjB,cAAY,SACRc,EAAS,OAAQ,CAACsC,UAAU,EAAMC,UAAW,QAErD,uBAAOC,QAAQ,YAAf,+CAGJ,sBAAKxD,UAAU,SAAf,UACI,sBAAKA,UAAU,UAAf,UACI,wBAAQA,UAAU,oDAEViE,KAAK,SACLP,QAAS,kBAAMvB,EAAU7B,EAAK,cAHtC,mBAMA,wBAAQN,UAAU,oDAEViE,KAAK,SACLP,QAAS,kBAAMvB,EAAU7B,EAAM,aAHvC,qBAQJ,kCACI,uBAAO2D,KAAK,WAAWjE,UAAU,qBAAqBkE,QAASvF,EAAMY,SAASxB,OACvEoG,SAAUxF,EAAMY,SAASnB,WAChC,+CAEJ,kCACI,uBAAO6F,KAAK,WAAWjE,UAAU,qBAAqBkE,QAASvF,EAAMY,SAASvB,aACvEmG,SAAUxF,EAAMY,SAASlB,iBAChC,+CAEJ,kCACI,uBAAO4F,KAAK,WAAWjE,UAAU,qBAAqBkE,QAASvF,EAAMY,SAAStB,aACvEkG,SAAUxF,EAAMY,SAASjB,iBAChC,uDAIP6C,EAAOiD,iBAAmB,kDClLjCC,G,MAAM3F,aAAS,WAEjB,OACI,gCACI,qBAAKsB,UAAU,eAAf,SACI,qBAAKA,UAAU,gCAAf,kCAIe,IAAlBT,EAASzB,MAAiB,qBAAKkC,UAAU,WAAWE,MAAO,CAAC,SAAW,SAA7C,SACvB,qBAAKF,UAAU,gBAAf,iBAGJ,cAAC,EAAD,CAAMT,SAAYA,IACC,OAAlBA,EAAS1B,MAAiB,cAAC,EAAD,CAAO0B,SAAYA,WAK1D+E,IAASC,OAAO,cAACF,EAAD,IAAQxC,SAASC,eAAe,W","file":"static/js/main.e44fbf98.chunk.js","sourcesContent":["import {makeAutoObservable} from \"mobx\"\r\n\r\nclass AppStore\r\n{\r\n    data = null\r\n    load = false\r\n    dt_box = true\r\n    keywords_box = true\r\n    rest_ent_box = true\r\n    constructor() { makeAutoObservable(this) }\r\n\r\n    setData = (data) => { this.data = data}\r\n    updateLoad = () => { this.load = !this.load }\r\n    updateDT = () => { this.dt_box = !this.dt_box }\r\n    updateKeywords = () => { this.keywords_box = !this.keywords_box }\r\n    updateEntities = () => { this.rest_ent_box = !this.rest_ent_box }\r\n}\r\n\r\nexport default new AppStore()","import React from \"react\";\r\nimport { toJS } from 'mobx'\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\nconst Table = observer((props) =>\r\n{\r\n    const len = () => { return {'width': (900 + (Object.keys(table[0]['sentences'][0]).length - 1)*150) + 'px'} }\r\n\r\n    const genTemplate = (str) => {\r\n        for(let i = 0; i < Object.keys(table[0]['sentences'][0]).length - 1; i++) str += ' 2fr'\r\n        return {'gridTemplateColumns': str}\r\n    }\r\n\r\n    const genTemplate2 = (str) => {\r\n        str += ` ${3 + (Object.keys(table[0]['sentences'][0]).length - 1) * 2}fr`\r\n        return {'gridTemplateColumns': str}\r\n    }\r\n\r\n    const checkSent = (obj) => {\r\n        for(let el in obj)\r\n            if(el !== 'text' && obj[el].length !== 0) return true\r\n\r\n        return false\r\n    }\r\n\r\n    let table = toJS(props.appStore.data['data'])\r\n\r\n    for (let el of table)\r\n    {\r\n        for(let el2 of el['sentences'])\r\n        {\r\n            if(!props.appStore.dt_box)\r\n                delete el2['date/time']\r\n            if(!props.appStore.keywords_box)\r\n                delete el2['keywords']\r\n            if(!props.appStore.rest_ent_box)\r\n                delete el2['rest entities']\r\n        }\r\n    }\r\n\r\n    for (let el of table)\r\n        for(let i = 0; i <el['sentences'].length; i++)\r\n            if(!checkSent(el['sentences'][i]))\r\n                el['sentences'].splice(i, 1)\r\n\r\n    table = table.filter((el) => {return el['sentences'].length !== 0})\r\n\r\n    if (table.length !== 0)\r\n    {\r\n        const keys = Object.keys(table[0])\r\n            .concat(Object.keys(table[0]['sentences'][0])).slice(0,-1)\r\n\r\n        const bar = keys.map( (elem) => {return <div className= 'el bar' >{elem}</div>})\r\n\r\n        const paragraphs = table.map((el) =>\r\n        {\r\n            return <div className='grid second' style={genTemplate2('2fr 1fr')}>\r\n                {Object.keys(el).sort().slice(0,-1).map((el3) => {\r\n                    return <div className='el'>{el[el3].join(', ')}</div>\r\n                })}\r\n                <div>{el['sentences'].map((el2) => {\r\n                            return <div className= 'sub' style={genTemplate('3fr')}>\r\n                                <div className='el'>{el2['text'].join(', ')}</div>\r\n                                {Object.keys(el2).slice(0,-1).map( (el3) => {\r\n                                    return <div className='el'>{el2[el3].join(', ')}</div>}\r\n                                )}\r\n                            </div>\r\n                    })\r\n                }</div>\r\n            </div>\r\n        })\r\n\r\n        return(\r\n                <div className='overflow'>\r\n                    <div className='table' style={len()}>\r\n                        <div className='grid' style={genTemplate('2fr 1fr 3fr')}>{bar}</div>\r\n                        <div>{paragraphs}</div>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n    else return <div className='info'>Sorry, such key phrases were not found in any sentence</div>\r\n})\r\n\r\nexport default Table","export default __webpack_public_path__ + \"static/media/def_value.ec85247c.txt\";","import {useForm} from \"react-hook-form\";\r\nimport React, {useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport M from \"materialize-css\";\r\nimport data from \"../def_value.txt\"\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\nconst URL = process.env.REACT_APP_FLASK_API\r\n\r\n\r\nconst Form = observer((props) =>\r\n{\r\n    const [url, setUrl] = useState(null);\r\n    const [textarea, setTextArea] = useState(['context_1'])\r\n    const { register, handleSubmit, setValue, formState: { errors } } = useForm({shouldUnregister: true});\r\n\r\n    useEffect(() =>\r\n    {\r\n        fetch(data).then(r => r.json()\r\n            .then(r =>\r\n            {\r\n                setValue(\"phrases\", r['phrases'])\r\n                setValue('context_1', r['context'])\r\n                setValue('text', r['text'])\r\n\r\n                M.updateTextFields()\r\n                M.textareaAutoResize(document.getElementById('textarea2'))\r\n            }))\r\n\r\n    }, []);\r\n\r\n    useEffect(() =>\r\n    {\r\n        const ta = document.querySelectorAll('.has-character-counter');\r\n        M.CharacterCounter.init(ta);\r\n    })\r\n\r\n    const changeURL = (str) => setUrl(str)\r\n\r\n    const addTextArea = () =>\r\n    {\r\n        textarea.push('context_' + (textarea.length + 1))\r\n        setTextArea(textarea)\r\n    }\r\n\r\n    const delTextArea = (elem) => {\r\n\r\n        if (textarea.length !== 0)\r\n        {\r\n            const index = textarea.indexOf(elem) + 1\r\n            for(let i = index; i <= textarea.length - 1; i++)\r\n            {\r\n                let el1 = document.getElementById('context_' + index)\r\n                let el2 = document.getElementById('context_' + (index+1))\r\n                el1.value  = el2.value\r\n            }\r\n            textarea.pop()\r\n            setTextArea(textarea)\r\n        }\r\n    }\r\n\r\n    const onSubmit = (data) =>\r\n    {\r\n        if (url === URL+'nlp/table')\r\n        {\r\n            props.appStore.updateLoad()\r\n            axios.post(url, data)\r\n                .then(res=> {\r\n                    props.appStore.setData(res.data)\r\n                    props.appStore.updateLoad()\r\n                    changeURL(URL)\r\n                })\r\n                .catch(err =>{\r\n                    props.appStore.updateLoad()\r\n                    changeURL(URL)\r\n                })\r\n        }\r\n\r\n        else if (url === URL+'nlp/xlsx')\r\n        {\r\n            props.appStore.updateLoad()\r\n            axios.post(url, data, { responseType: 'blob' })\r\n                .then(res=> {\r\n                    const url = window.URL.createObjectURL(new Blob([res.data]));\r\n                    const link = document.createElement('a');\r\n                    link.href = url;\r\n                    link.setAttribute('download', 'file.xlsx'); //or any other extension\r\n                    document.body.appendChild(link);\r\n                    link.click();\r\n                    props.appStore.updateLoad();\r\n                    changeURL(URL)\r\n                })\r\n                .catch(err =>{\r\n                    props.appStore.updateLoad()\r\n                    changeURL(URL)\r\n                })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <form className=\"form\" onSubmit={handleSubmit(onSubmit)}>\r\n            <div className='flex-area'>\r\n                <div className=\"input-field inputs\">\r\n                <textarea\r\n                    id=\"textarea1\"\r\n                    className='materialize-textarea has-character-counter'\r\n                    style={{\"height\":\"70px\"}}\r\n                    data-length=\"100\"\r\n                    {...register(\"phrases\", {required: true, maxLength: 100})}\r\n                />\r\n                    <label htmlFor='textarea1'>Поиск абзацев: введите ключевые слова</label>\r\n                </div>\r\n\r\n            </div>\r\n            {\r\n                textarea.map((el, index) => {\r\n                        return <div className='flex-area animation'>\r\n                            <div className=\"input-field inputs\">\r\n                        <textarea\r\n                            id={el}\r\n                            className='materialize-textarea has-character-counter'\r\n                            style={{\"height\":\"70px\"}}\r\n                            data-length=\"100\"\r\n                            {...register(el, {required: true, maxLength: 100})}\r\n                        />\r\n                                        <label htmlFor='textarea1'>Контекст: введите ключевые слова</label>\r\n                                    </div>\r\n                            {\r\n                                index === 0 &&\r\n                                <button className=\" add-phrases btn-floating btn-small waves-effect waves-light blue\"\r\n                                    onClick={() => addTextArea()}>\r\n                                    <i className=\"material-icons\">add</i>\r\n                                </button>\r\n                            }\r\n                            {\r\n                                index !== 0 &&\r\n                                <button className=\" add-phrases btn-floating btn-small\r\n                                            waves-effect waves-light blue\"\r\n                                        onClick={() => delTextArea(el)}>\r\n                                    <i className=\"material-icons\">close</i>\r\n                                </button>\r\n                            }\r\n                        </div>\r\n                })\r\n            }\r\n            <div className='input-field' >\r\n                <textarea\r\n                    id=\"textarea2\"\r\n                    className=\"materialize-textarea has-character-counter\"\r\n                    style={{\"height\":\"300px\"}}\r\n                    data-length=\"10000\"\r\n                    {...register(\"text\", {required: true, maxLength: 10000})} //максимальная длина по ТЗ\r\n                />\r\n                <label htmlFor='textarea2'>Текст</label>\r\n            </div>\r\n\r\n            <div className='accept'>\r\n                <div className='buttons'>\r\n                    <button className=\"btn btn-large waves-effect waves-light light-blue\"\r\n                        // style={{\"width\":\"9em\", 'margin': \"0 15px 30px auto\"}}\r\n                            type='submit'\r\n                            onClick={() => changeURL(URL +'nlp/table')}\r\n                    >TABLE\r\n                    </button>\r\n                    <button className=\"btn btn-large waves-effect waves-light light-blue\"\r\n                        // style={{\"width\":\"9em\", 'margin': \"0 auto 30px 15px\"}}\r\n                            type='submit'\r\n                            onClick={() => changeURL(URL + 'nlp/xlsx')}\r\n                    >XLSX\r\n                    </button>\r\n                </div>\r\n\r\n                <label>\r\n                    <input type=\"checkbox\" className=\"filled-in checkbox\" checked={props.appStore.dt_box}\r\n                           onChange={props.appStore.updateDT}/>\r\n                    <span>datetime</span>\r\n                </label>\r\n                <label>\r\n                    <input type=\"checkbox\" className=\"filled-in checkbox\" checked={props.appStore.keywords_box}\r\n                           onChange={props.appStore.updateKeywords}/>\r\n                    <span>keywords</span>\r\n                </label>\r\n                <label>\r\n                    <input type=\"checkbox\" className=\"filled-in checkbox\" checked={props.appStore.rest_ent_box}\r\n                           onChange={props.appStore.updateEntities}/>\r\n                    <span>rest entities</span>\r\n                </label>\r\n            </div>\r\n\r\n            {errors.exampleRequired && <span>Error(((</span>}\r\n        </form>\r\n    )\r\n})\r\n\r\nexport default Form","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {observer} from \"mobx-react-lite\";\nimport appStore from \"./store/appStore\";\n\nimport Table from \"./components/table\";\nimport Form from \"./components/form\";\nimport \"./style/style.css\"\n\n\nconst App = observer(() =>\n{\n    return (\n        <div>\n            <div className=\"navbar-fixed\">\n                <nav className=\" nav-wrapper blue navbar_text\">\n                    Search for offers\n                </nav>\n            </div>\n            {appStore.load === true && <div className=\"progress\" style={{'position':'fixed'}}>\n                <div className=\"indeterminate\"> </div>\n            </div>}\n\n            <Form appStore = {appStore}/>\n            {appStore.data !== null && <Table appStore = {appStore}/>}\n        </div>\n    );\n})\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}