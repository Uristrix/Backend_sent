{"version":3,"sources":["table.js","form.js","index.js"],"names":["Table","props","bar","Object","keys","data","concat","slice","map","elem","i","className","paragraphs","el","sentences","el2","join","URL","process","Form","useState","url","setUrl","useForm","register","handleSubmit","errors","formState","changeURL","str","useEffect","ta","document","querySelectorAll","M","CharacterCounter","init","onSubmit","updateLoad","axios","post","then","res","updateData","responseType","window","createObjectURL","Blob","link","createElement","href","setAttribute","body","appendChild","click","style","id","required","maxLength","htmlFor","type","onClick","exampleRequired","App","setData","load","setLoad","console","log","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b6a01ef3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Table = (props) =>\r\n{\r\n    const keys = Object.keys(props.data['data'][0])\r\n        .concat(Object.keys(props.data['data'][0]['sentences'][0])).slice(0,-1)\r\n    const bar = keys.map( (elem, i) => {return <div className= 'el bar' >{elem}</div>})\r\n\r\n    const paragraphs = props.data['data'].map((el) =>\r\n    {\r\n        const sentences = el['sentences'].map((el2) =>\r\n        {\r\n            return <div className= 'sub'>\r\n                <div className='el'>{el2['text']}</div>\r\n                <div className='el'>{el2['date/time'].join(', ')}</div>\r\n                <div className='el'>{el2['keywords'].join(', ')}</div>\r\n                <div className='el'>{el2['rest entities'].join(', ')}</div>\r\n            </div>\r\n        })\r\n\r\n        return <div className='grid second'>\r\n            <div className='el'>{el['key phrases'].join(', ')}</div>\r\n            <div className='el'>{el[\"paragraph num\"]}</div>\r\n            <div className=''>{sentences}</div>\r\n        </div>\r\n    })\r\n\r\n    return(\r\n        <div className='overflow'>\r\n            <div className='table'>\r\n                <div className='grid'>{bar}</div>\r\n                <div>{paragraphs}</div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Table","import {useForm} from \"react-hook-form\";\r\nimport React, {useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport M from \"materialize-css\";\r\n\r\nconst URL = process.env.REACT_APP_FLASK_API\r\nconst Form = (props) =>\r\n{\r\n    const [url, setUrl] = useState(null);\r\n    const { register, handleSubmit, formState: { errors } } = useForm();\r\n\r\n    const changeURL = (str) => setUrl(str)\r\n\r\n    const onSubmit = (data) =>\r\n    {\r\n        props.updateLoad(true)\r\n        if (url === URL+'nlp/table')\r\n            axios.post(url, data).then(res=> {\r\n                props.updateData(res.data)\r\n                props.updateLoad(false)\r\n            })\r\n\r\n        else\r\n            axios.post(url, data, { responseType: 'blob' }).then(res=> {\r\n\r\n               const url = window.URL.createObjectURL(new Blob([res.data]));\r\n               const link = document.createElement('a');\r\n               link.href = url;\r\n               link.setAttribute('download', 'file.xlsx'); //or any other extension\r\n               document.body.appendChild(link);\r\n               link.click();\r\n               props.updateLoad(false)\r\n            })\r\n\r\n    }\r\n\r\n    useEffect(() =>\r\n    {\r\n        let ta = document.querySelectorAll('.has-character-counter');\r\n        M.CharacterCounter.init(ta);\r\n    },[]) //для 1 рендера подрубаем скрипты из materialize\r\n\r\n\r\n    return(\r\n        <form className=\"form\" onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"input-field\" style={{'minHeight':'105px'}}>\r\n                <textarea\r\n                    id=\"textarea1\"\r\n                    className='materialize-textarea has-character-counter'\r\n                    style={{\"height\":\"70px\"}}\r\n                    data-length=\"100\"\r\n                    {...register(\"phrases\", {required: true, maxLength: 100})}\r\n                />\r\n                <label htmlFor='textarea1'>Phrases (separated by commas)</label>\r\n            </div>\r\n\r\n            <div className='input-field' style={{'minHeight':'335px'}}>\r\n                <textarea\r\n                    id=\"textarea2\"\r\n                    className=\"materialize-textarea has-character-counter\"\r\n                    style={{\"height\":\"300px\"}}\r\n                    data-length=\"10000\"\r\n                    {...register(\"text\", {required: true, maxLength: 10000})} //максимальная длина по ТЗ\r\n                />\r\n                <label htmlFor='textarea2'>Text</label>\r\n            </div>\r\n\r\n            <div style={{'display':'flex'}}>\r\n                <button className=\"btn btn-large waves-effect waves-light light-blue\"\r\n                        style={{\"width\":\"9em\", 'margin': \"0 15px 30px auto\"}}\r\n                        type='submit'\r\n                        onClick={() => changeURL(URL +'nlp/table')}\r\n                        >TABLE\r\n                </button>\r\n                <button className=\"btn btn-large waves-effect waves-light light-blue\"\r\n                        style={{\"width\":\"9em\", 'margin': \"0 auto 30px 15px\"}}\r\n                        type='submit'\r\n                        onClick={() => changeURL(URL + 'nlp/xlsx')}\r\n                        >XLSX\r\n                </button>\r\n            </div>\r\n\r\n            {errors.exampleRequired && <span>Error(((</span>}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport Table from \"./table\";\nimport Form from \"./form\";\nimport \"./style.css\"\n\nconst App = () =>\n{\n    const [data, setData] = useState(null)\n    const [load, setLoad] = useState(false)\n    const updateData = (data) => setData(data)\n    const updateLoad = (load) => {setLoad(load); console.log(\"load\")}\n    return (\n        <div>\n            <div className=\"navbar-fixed\">\n                <nav className=\" nav-wrapper blue\">\n                    <div className=\"brand-logo center \">Search for offers</div>\n                </nav>\n\n            </div>\n\n            {load === true && <div className=\"progress\" style={{'position':'fixed'}}><div className=\"indeterminate\"> </div></div>}\n            <Form updateData = {updateData} updateLoad = {updateLoad}/>\n            {data !== null && <Table data = {data}/>}\n        </div>\n    );\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}