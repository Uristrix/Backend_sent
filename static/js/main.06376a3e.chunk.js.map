{"version":3,"sources":["table.js","form.js","index.js"],"names":["Table","props","genTemplate","str","i","Object","keys","data","length","bar","sort","concat","slice","map","elem","className","paragraphs","el","style","el3","join","el2","URL","process","Form","useState","url","setUrl","textarea","setTextArea","useForm","shouldUnregister","register","handleSubmit","errors","formState","changeURL","useEffect","ta","document","querySelectorAll","M","CharacterCounter","init","onSubmit","updateLoad","axios","post","then","res","updateData","catch","err","responseType","window","createObjectURL","Blob","link","createElement","href","setAttribute","body","appendChild","click","id","required","maxLength","htmlFor","onClick","push","index","indexOf","el1","getElementById","value","pop","delTextArea","type","exampleRequired","App","setData","load","setLoad","ReactDOM","render"],"mappings":"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","file":"static/js/main.06376a3e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Table = (props) =>\r\n{\r\n    const len = () => { return {'width': (1000 +(Object.keys(props.data['data'][0]).length - 1)*150) + 'px'} }\r\n\r\n    const genTemplate = (str) => {\r\n        for(let i = 0;  i < Object.keys(props.data['data'][0]).length - 2; i++) str = '2fr ' + str\r\n        return {'gridTemplateColumns': str}\r\n    }\r\n\r\n    if (props.data['data'].length !== 0)\r\n    {\r\n        const keys = Object.keys(props.data['data'][0]).sort()\r\n            .concat(Object.keys(props.data['data'][0]['sentences'][0])).slice(0,-1)\r\n\r\n        const bar = keys.map( (elem, i) => {return <div className= 'el bar' >{elem}</div>})\r\n\r\n        const paragraphs = props.data['data'].map((el) =>\r\n        {\r\n            return <div className='grid second' style={genTemplate('1fr 9fr')}>\r\n                {Object.keys(el).sort().slice(0,-1).map((el3) => {\r\n                    return <div className='el'>{el[el3].join(', ')}</div>\r\n                })\r\n                }\r\n                <div>{el['sentences'].map((el2) =>\r\n                    {\r\n                        return <div className= 'sub' style={{'gridTemplateColumns':'3fr 2fr 2fr 2fr'}}>\r\n                            <div className='el'>{el2['text'].join(', ')}</div>\r\n                            <div className='el'>{el2['date/time'].join(', ')}</div>\r\n                            <div className='el'>{el2['keywords'].join(', ')}</div>\r\n                            <div className='el'>{el2['rest entities'].join(', ')}</div>\r\n                        </div>\r\n                    })\r\n                }</div>\r\n            </div>\r\n        })\r\n\r\n        return(\r\n            <div>\r\n                <div className='overflow'>\r\n                    <div className='table' style={len()}>\r\n                        <div className='grid' style={genTemplate('1fr 3fr 2fr 2fr 2fr')}>{bar}</div>\r\n                        <div>{paragraphs}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else return <div className='info'>Sorry, such key phrases were not found in any sentence</div>\r\n}\r\n\r\nexport default Table","import {useForm} from \"react-hook-form\";\r\nimport React, {useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport M from \"materialize-css\";\r\n\r\nconst URL = process.env.REACT_APP_FLASK_API\r\n\r\nconst Form = (props) =>\r\n{\r\n    const [url, setUrl] = useState(null);\r\n    const [textarea, setTextArea] = useState([])\r\n    const { register, handleSubmit, formState: { errors } } = useForm({shouldUnregister: true});\r\n\r\n    const changeURL = (str) => setUrl(str)\r\n\r\n    const addTextArea = () =>\r\n    {\r\n        textarea.push('key phrases_' + (textarea.length + 1))\r\n        setTextArea(textarea)\r\n    }\r\n\r\n    const delTextArea = (elem) => {\r\n\r\n        if (textarea.length !== 0)\r\n        {\r\n            const index = textarea.indexOf(elem) + 1\r\n            for(let i = index; i <= textarea.length - 1; i++)\r\n            {\r\n                let el1 = document.getElementById('key phrases_' + index)\r\n                let el2 = document.getElementById('key phrases_' + (index+1))\r\n                el1.value  = el2.value\r\n            }\r\n            textarea.pop()\r\n            setTextArea(textarea)\r\n        }\r\n    }\r\n\r\n    const onSubmit = (data) =>\r\n    {\r\n\r\n        if (url === URL+'nlp/table')\r\n        {\r\n            props.updateLoad(true)\r\n            axios.post(url, data)\r\n                .then(res=> {\r\n                    props.updateData(res.data)\r\n                    props.updateLoad(false)\r\n                    changeURL(URL)\r\n                })\r\n                .catch(err =>{\r\n                    props.updateLoad(false)\r\n                    changeURL(URL)\r\n                })\r\n        }\r\n\r\n        else if (url === URL+'nlp/xlsx')\r\n        {\r\n            props.updateLoad(true)\r\n            axios.post(url, data, { responseType: 'blob' })\r\n                .then(res=> {\r\n                    const url = window.URL.createObjectURL(new Blob([res.data]));\r\n                    const link = document.createElement('a');\r\n                    link.href = url;\r\n                    link.setAttribute('download', 'file.xlsx'); //or any other extension\r\n                    document.body.appendChild(link);\r\n                    link.click();\r\n                    props.updateLoad(false);\r\n                    changeURL(URL)\r\n                })\r\n                .catch(err =>{\r\n                    props.updateLoad(false)\r\n                    changeURL(URL)\r\n                })\r\n        }\r\n    }\r\n\r\n    useEffect(() =>\r\n    {\r\n        const ta = document.querySelectorAll('.has-character-counter');\r\n        M.CharacterCounter.init(ta);\r\n    })\r\n\r\n    return(\r\n        <form className=\"form\" onSubmit={handleSubmit(onSubmit)}>\r\n            <div className='flex-area'>\r\n                <div className=\"input-field inputs\">\r\n                <textarea\r\n                    id=\"textarea1\"\r\n                    className='materialize-textarea has-character-counter'\r\n                    style={{\"height\":\"70px\"}}\r\n                    data-length=\"100\"\r\n                    {...register(\"phrases\", {required: true, maxLength: 100})}\r\n                />\r\n                    <label htmlFor='textarea1'>Phrases (sep. by commas)</label>\r\n                </div>\r\n\r\n                <button className=\" add-phrases btn-floating btn-small waves-effect waves-light blue\"\r\n                        onClick={() => addTextArea()}>\r\n                    <i className=\"material-icons\">add</i>\r\n                </button>\r\n            </div>\r\n            {\r\n                textarea.map((el) => {\r\n                        return <div className='flex-area animation'>\r\n                            <div className=\"input-field inputs\">\r\n                        <textarea\r\n                            id={el}\r\n                            className='materialize-textarea has-character-counter'\r\n                            style={{\"height\":\"70px\"}}\r\n                            data-length=\"100\"\r\n                            {...register(el, {required: true, maxLength: 100})}\r\n                        />\r\n                                        <label htmlFor='textarea1'>Phrases (sep. by commas)</label>\r\n                                    </div>\r\n\r\n                                    <button className=\" add-phrases btn-floating btn-small\r\n                                            waves-effect waves-light blue\"\r\n                                            onClick={() => delTextArea(el)}>\r\n                                        <i className=\"material-icons\">close</i>\r\n                                    </button>\r\n                                </div>\r\n                            }\r\n                )\r\n            }\r\n            <div className='input-field' style={{'minHeight':'335px'}}>\r\n                <textarea\r\n                    id=\"textarea2\"\r\n                    className=\"materialize-textarea has-character-counter\"\r\n                    style={{\"height\":\"300px\"}}\r\n                    data-length=\"10000\"\r\n                    {...register(\"text\", {required: true, maxLength: 10000})} //максимальная длина по ТЗ\r\n                />\r\n                <label htmlFor='textarea2'>Text</label>\r\n            </div>\r\n\r\n            <div style={{'display':'flex'}}>\r\n                <button className=\"btn btn-large waves-effect waves-light light-blue\"\r\n                        style={{\"width\":\"9em\", 'margin': \"0 15px 30px auto\"}}\r\n                        type='submit'\r\n                        onClick={() => changeURL(URL +'nlp/table')}\r\n                        >TABLE\r\n                </button>\r\n                <button className=\"btn btn-large waves-effect waves-light light-blue\"\r\n                        style={{\"width\":\"9em\", 'margin': \"0 auto 30px 15px\"}}\r\n                        type='submit'\r\n                        onClick={() => changeURL(URL + 'nlp/xlsx')}\r\n                        >XLSX\r\n                </button>\r\n\r\n            </div>\r\n\r\n            {errors.exampleRequired && <span>Error(((</span>}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport Table from \"./table\";\nimport Form from \"./form\";\nimport \"./style.css\"\n\nconst App = () =>\n{\n    const [data, setData] = useState(null)\n    const [load, setLoad] = useState(false)\n    const updateData = (data) => setData(data);\n    const updateLoad = (load) => setLoad(load);\n    return (\n        <div>\n            <div className=\"navbar-fixed\">\n                <nav className=\" nav-wrapper blue navbar_text\">\n                    Search for offers\n                </nav>\n            </div>\n\n            {load === true && <div className=\"progress\" style={{'position':'fixed'}}>\n                <div className=\"indeterminate\"> </div>\n            </div>}\n\n            <Form updateData = {updateData} updateLoad = {updateLoad}/>\n            {data !== null && <Table data = {data} updateData = {updateData} updateLoad = {updateLoad}/>}\n        </div>\n    );\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}