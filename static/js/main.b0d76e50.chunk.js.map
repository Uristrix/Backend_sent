{"version":3,"sources":["table.js","def_value.txt","form.js","index.js"],"names":["Table","props","t","checkbox","genTemplate","str","i","Object","keys","data","length","bar","concat","slice","map","elem","className","paragraphs","el","style","sort","el3","join","el2","obj","checkSent","URL","process","Form","useState","url","setUrl","textarea","setTextArea","useForm","shouldUnregister","register","handleSubmit","setValue","errors","formState","useEffect","fetch","then","r","json","M","updateTextFields","textareaAutoResize","document","getElementById","ta","querySelectorAll","CharacterCounter","init","changeURL","onSubmit","updateLoad","axios","post","res","updateData","catch","err","responseType","window","createObjectURL","Blob","link","createElement","href","setAttribute","body","appendChild","click","id","required","maxLength","htmlFor","index","onClick","push","indexOf","el1","value","pop","delTextArea","type","checked","onChange","setCheckbox","exampleRequired","App","setData","load","setLoad","ReactDOM","render"],"mappings":"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","file":"static/js/main.b0d76e50.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Table = (props) =>\r\n{\r\n    const t = props.checkbox === false? -1:-4\r\n\r\n    const len = () => { return {'width': (900 +(Object.keys(props.data['data'][0]['sentences'][0]).length - 1)*150) + 'px'} }\r\n\r\n    const genTemplate = (str) => {\r\n        for(let i = 0; i < Object.keys(props.data['data'][0]['sentences'][0]).length + t; i++) str += ' 2fr'\r\n        return {'gridTemplateColumns': str}\r\n    }\r\n\r\n    const genTemplate2 = (str) => {\r\n         str += ` ${3 + (Object.keys(props.data['data'][0]['sentences'][0]).length + t) * 2}fr`\r\n        return {'gridTemplateColumns': str}\r\n    }\r\n\r\n    const checkSent = (obj) => {\r\n        for(let el in obj)\r\n        {\r\n            //if(props.checkbox === false)\r\n                if(el !== 'text' && obj[el].length !== 0) return true\r\n\r\n            //else if(!Object.keys(obj).slice(0, t).includes(el) && obj[el].length !== 0) return true\r\n        }\r\n\r\n\r\n        return false\r\n    }\r\n\r\n    if (props.data['data'].length !== 0)\r\n    {\r\n        const keys = Object.keys(props.data['data'][0])\r\n            .concat(Object.keys(props.data['data'][0]['sentences'][0])).slice(0,t)\r\n\r\n        const bar = keys.map( (elem, i) => {return <div className= 'el bar' >{elem}</div>})\r\n\r\n        const paragraphs = props.data['data'].map((el) =>\r\n        {\r\n            return <div className='grid second' style={genTemplate2('2fr 1fr')}>\r\n                {Object.keys(el).sort().slice(0,-1).map((el3) => {\r\n                    return <div className='el'>{el[el3].join(', ')}</div>\r\n                })\r\n                }\r\n                <div>{el['sentences'].map((el2) =>\r\n                    {\r\n                        if(checkSent(el2))\r\n                            return <div className= 'sub' style={genTemplate('3fr')}>\r\n                                <div className='el'>{el2['text'].join(', ')}</div>\r\n                                {Object.keys(el2).slice(0,t).map( (el3) => {\r\n                                    return <div className='el'>{el2[el3].join(', ')}</div>}\r\n                                )}\r\n                            </div>\r\n                    })\r\n                }</div>\r\n            </div>\r\n        })\r\n\r\n        return(\r\n            <div>\r\n                <div className='overflow'>\r\n                    <div className='table' style={len()}>\r\n                        <div className='grid' style={genTemplate('2fr 1fr 3fr')}>{bar}</div>\r\n                        <div>{paragraphs}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else return <div className='info'>Sorry, such key phrases were not found in any sentence</div>\r\n}\r\n\r\nexport default Table","export default __webpack_public_path__ + \"static/media/def_value.ec85247c.txt\";","import {useForm} from \"react-hook-form\";\r\nimport React, {useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport M from \"materialize-css\";\r\nimport data from \"./def_value.txt\"\r\nconst URL = process.env.REACT_APP_FLASK_API\r\n\r\nconst Form = (props) =>\r\n{\r\n    const [url, setUrl] = useState(null);\r\n    const [textarea, setTextArea] = useState(['context_1'])\r\n    const { register, handleSubmit, setValue, formState: { errors } } = useForm({shouldUnregister: true});\r\n\r\n    useEffect(() =>\r\n    {\r\n        fetch(data).then(r => r.json()\r\n            .then(r =>\r\n            {\r\n                setValue(\"phrases\", r['phrases'])\r\n                setValue('context_1', r['context'])\r\n                setValue('text', r['text'])\r\n\r\n\r\n                M.updateTextFields()\r\n                M.textareaAutoResize(document.getElementById('textarea2'))\r\n            }))\r\n\r\n    }, []);\r\n\r\n    useEffect(() =>\r\n    {\r\n        const ta = document.querySelectorAll('.has-character-counter');\r\n        M.CharacterCounter.init(ta);\r\n    })\r\n\r\n    const changeURL = (str) => setUrl(str)\r\n\r\n    const addTextArea = () =>\r\n    {\r\n        textarea.push('context_' + (textarea.length + 1))\r\n        setTextArea(textarea)\r\n    }\r\n\r\n    const delTextArea = (elem) => {\r\n\r\n        if (textarea.length !== 0)\r\n        {\r\n            const index = textarea.indexOf(elem) + 1\r\n            for(let i = index; i <= textarea.length - 1; i++)\r\n            {\r\n                let el1 = document.getElementById('context_' + index)\r\n                let el2 = document.getElementById('context_' + (index+1))\r\n                el1.value  = el2.value\r\n            }\r\n            textarea.pop()\r\n            setTextArea(textarea)\r\n        }\r\n    }\r\n\r\n    const onSubmit = (data) =>\r\n    {\r\n        if (url === URL+'nlp/table')\r\n        {\r\n            props.updateLoad(true)\r\n            axios.post(url, data)\r\n                .then(res=> {\r\n                    props.updateData(res.data)\r\n                    props.updateLoad(false)\r\n                    changeURL(URL)\r\n                })\r\n                .catch(err =>{\r\n                    props.updateLoad(false)\r\n                    changeURL(URL)\r\n                })\r\n        }\r\n\r\n        else if (url === URL+'nlp/xlsx')\r\n        {\r\n            props.updateLoad(true)\r\n            axios.post(url, data, { responseType: 'blob' })\r\n                .then(res=> {\r\n                    const url = window.URL.createObjectURL(new Blob([res.data]));\r\n                    const link = document.createElement('a');\r\n                    link.href = url;\r\n                    link.setAttribute('download', 'file.xlsx'); //or any other extension\r\n                    document.body.appendChild(link);\r\n                    link.click();\r\n                    props.updateLoad(false);\r\n                    changeURL(URL)\r\n                })\r\n                .catch(err =>{\r\n                    props.updateLoad(false)\r\n                    changeURL(URL)\r\n                })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <form className=\"form\" onSubmit={handleSubmit(onSubmit)}>\r\n            <div className='flex-area'>\r\n                <div className=\"input-field inputs\">\r\n                <textarea\r\n                    id=\"textarea1\"\r\n                    className='materialize-textarea has-character-counter'\r\n                    style={{\"height\":\"70px\"}}\r\n                    data-length=\"100\"\r\n                    {...register(\"phrases\", {required: true, maxLength: 100})}\r\n                />\r\n                    <label htmlFor='textarea1'>Поиск абзацев: введите ключевые слова</label>\r\n                </div>\r\n\r\n\r\n            </div>\r\n            {\r\n                textarea.map((el, index) => {\r\n                        return <div className='flex-area animation'>\r\n                            <div className=\"input-field inputs\">\r\n                        <textarea\r\n                            id={el}\r\n                            className='materialize-textarea has-character-counter'\r\n                            style={{\"height\":\"70px\"}}\r\n                            data-length=\"100\"\r\n                            {...register(el, {required: true, maxLength: 100})}\r\n                        />\r\n                                        <label htmlFor='textarea1'>Контекст: введите ключевые слова</label>\r\n                                    </div>\r\n                            {\r\n                                index === 0 &&\r\n                                <button className=\" add-phrases btn-floating btn-small waves-effect waves-light blue\"\r\n                                    onClick={() => addTextArea()}>\r\n                                    <i className=\"material-icons\">add</i>\r\n                                </button>\r\n                            }\r\n                            {\r\n                                index !== 0 &&\r\n                                <button className=\" add-phrases btn-floating btn-small\r\n                                            waves-effect waves-light blue\"\r\n                                        onClick={() => delTextArea(el)}>\r\n                                    <i className=\"material-icons\">close</i>\r\n                                </button>\r\n                            }\r\n                        </div>\r\n                })\r\n            }\r\n            <div className='input-field' >\r\n                <textarea\r\n                    id=\"textarea2\"\r\n                    className=\"materialize-textarea has-character-counter\"\r\n                    style={{\"height\":\"300px\"}}\r\n                    data-length=\"10000\"\r\n                    {...register(\"text\", {required: true, maxLength: 10000})} //максимальная длина по ТЗ\r\n                />\r\n                <label htmlFor='textarea2'>Текст</label>\r\n            </div>\r\n\r\n            <div className='accept'>\r\n                <div className='buttons'>\r\n                    <button className=\"btn btn-large waves-effect waves-light light-blue\"\r\n                        // style={{\"width\":\"9em\", 'margin': \"0 15px 30px auto\"}}\r\n                            type='submit'\r\n                            onClick={() => changeURL(URL +'nlp/table')}\r\n                    >TABLE\r\n                    </button>\r\n                    <button className=\"btn btn-large waves-effect waves-light light-blue\"\r\n                        // style={{\"width\":\"9em\", 'margin': \"0 auto 30px 15px\"}}\r\n                            type='submit'\r\n                            onClick={() => changeURL(URL + 'nlp/xlsx')}\r\n                    >XLSX\r\n                    </button>\r\n                </div>\r\n\r\n                <label>\r\n                    <input type=\"checkbox\" className=\"filled-in checkbox\" checked={props.checkbox} onChange={props.setCheckbox}/>\r\n                    <span>del dt, keywords, rest ent.</span>\r\n                </label>\r\n            </div>\r\n\r\n            {errors.exampleRequired && <span>Error(((</span>}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport Table from \"./table\";\nimport Form from \"./form\";\nimport \"./style.css\"\n\nconst App = () =>\n{\n    const [data, setData] = useState(null)\n    const [load, setLoad] = useState(false)\n    const [checkbox, setCheckbox] = useState(false)\n    const updateData = (data) => setData(data);\n    const updateLoad = (load) => setLoad(load);\n    const changeCheckbox = () => setCheckbox(!checkbox)\n    return (\n        <div>\n            <div className=\"navbar-fixed\">\n                <nav className=\" nav-wrapper blue navbar_text\">\n                    Search for offers\n                </nav>\n            </div>\n\n            {load === true && <div className=\"progress\" style={{'position':'fixed'}}>\n                <div className=\"indeterminate\"> </div>\n            </div>}\n\n            <Form updateData = {updateData} updateLoad = {updateLoad}\n                  checkbox = {checkbox} setCheckbox = {changeCheckbox}/>\n            {data !== null && <Table data = {data} updateData = {updateData} updateLoad = {updateLoad}\n                                     checkbox = {checkbox}/>}\n        </div>\n    );\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}